#!/usr/bin/env python

"""
DESI spectral extraction code benchmark

salloc -N 5 -t 2:00:00 -C haswell -q interactive
srun -n 160 -c 2 --cpu_bind=cores ./desi-extract -i $SCRATCH/desi/benchmark/inputs/ -o $SCRATCH/temp $(date +%s)
"""

import argparse
import glob 
import os
import pprint
import socket
import random
import sys
import time

from desispec.scripts import extract

random.seed(1)

#- Parse args before initializing MPI so that --help will work anywhere

parser = argparse.ArgumentParser()
parser.add_argument("indir", help="input data directory")
parser.add_argument("outdir", help="output directory")
parser.add_argument("start_time", help="use $(date +%%s)", type=float)
parser.add_argument("-c", "--camera", type=str, choices=["b", "r", "z"], help="channel selection", default=None)
parser.add_argument("--night", type=str, help="YEARMMDD to extract", default='*')
parser.add_argument("--expid", type=str, help="Exposure ID to extract", default='*')
# parser.add_argument("-n", "--nframes", type=int, help="number of input frames to extract")
parser.add_argument("-v", "--verbose", action="store_true", help="print per-rank detailed timing")
args = parser.parse_args()

from mpi4py import MPI

comm = MPI.COMM_WORLD
rank = comm.rank
size = comm.size

comm.barrier()
if rank == 0:
    start_time = args.start_time
    startup_time = time.time() - start_time

bundles_per_frame = 20
assert size % bundles_per_frame == 0, 'MPI size {} should be multiple of {}'.format(size, bundles_per_frame)
nframe = size // bundles_per_frame

if args.camera is None:
    args.camera = '?'

if args.expid != '*':
    args.expid = '{:08d}'.format(int(args.expid))

if rank == 0:
    assert os.path.exists(args.outdir)
    pixfiles = sorted(glob.glob(args.indir + \
            '/pix/{}/pix-{}?-{}.fits'.format(
            args.night, args.camera, args.expid)))

    random.shuffle(pixfiles)
    assert len(pixfiles) > 0
    assert nframe <= len(pixfiles)
    pixfiles = pixfiles[0:nframe]
else:
    pixfiles = None

pixfiles = comm.bcast(pixfiles, root=0)
assert nframe == len(pixfiles)

if rank == 0:
    print('{} input frames'.format(nframe))
    print('Splitting {} ranks into {} communicators'.format(size, nframe))
    sys.stdout.flush()

comm.barrier()

group = rank // bundles_per_frame
group_rank =  rank % bundles_per_frame

comm_group = comm.Split(color=group, key=group_rank)
assert comm_group.rank == group_rank

cmd_template = "desi_extract_spectra --mpi" \
        " -i {indir}/pix/{night}/{pixfile}" \
        " -f {indir}/pix/{night}/{fibermapfile}" \
        " -p {indir}/psf/{night}/{psffile}" \
        " -o {outdir}/{framefile}"
        
filename = pixfiles[group]
pixdir, pixfile = os.path.split(filename)
night = os.path.basename(pixdir)
prefix, camera, expid = os.path.splitext(pixfile)[0].split('-')
fibermapfile = 'fibermap-{}.fits'.format(expid)
psffile = 'psfnight-{}.fits'.format(camera)
framefile = 'frame-{}-{}.fits'.format(camera, expid)

cmd = cmd_template.format(indir=args.indir, night=night, outdir=args.outdir,
    pixfile=pixfile, fibermapfile=fibermapfile, psffile=psffile,
    framefile=framefile)

#- DEBUG speedup
# if camera.startswith('b'):
#     cmd = cmd + ' -w 4000,4200,1'
# elif camera.startswith('r'):
#     cmd = cmd + ' -w 6000,6200,1'
# elif camera.startswith('z'):
#     cmd = cmd + ' -w 9000,9200,1'

if camera.startswith('b'):
    cmd = cmd + ' -w 3570,5948,0.7'
elif camera.startswith('r'):
    cmd = cmd + ' -w 5626,7740,0.7'
elif camera.startswith('z'):
    cmd = cmd + ' -w 7436,9833,0.7'

if comm_group.rank == 0:
    print(rank, cmd)
    sys.stdout.flush()

args = extract.parse(cmd.split()[1:])
timing = dict()
extract.main_mpi(args, comm=comm_group, timing=timing)

comm.barrier()
end_time = time.time()

timings = comm.gather(timing, root=0)
hostnames = comm.gather(socket.gethostname(), root=0)
if rank == 0:
    num_nodes = len(set(hostnames))
    node_hours = num_nodes * (end_time - start_time) / (60*60)
    work_rate = nframe / node_hours

    if args.verbose:
        pprint.pprint(timings)

    print('desi-extract {} effective frames in {:.1f} min'.format(nframe, (end_time - start_time)/60))
    print('desi-extract effective work rate = {:.2f} frames per node-hour'.format(work_rate))
    print('desi-extract startup time: {:.1f} sec'.format(startup_time))
    print('desi-extract elapsed time: {:.1f} sec'.format(end_time - start_time))
